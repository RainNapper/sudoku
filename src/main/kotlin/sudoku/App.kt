/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sudoku

class SudokuSet() {
    companion object {
        val allNumbers = setOf(1, 2, 3, 4, 5, 6, 7, 8, 9)
    }

    val set: MutableSet<Int>
    init {
        this.set = HashSet()
    }

    private fun checkNum(num: Int) {
        if (num < 1 || num > 9) {
            throw IllegalStateException("Invalid number")
        }
    }

    fun addNumber(num: Int) {
        checkNum(num)

        if (set.contains(num)) {
            throw IllegalStateException("Set already has $num")
        }

        set.add(num)
    }

    fun removeNumber(num: Int) {
        checkNum(num)

        if (!set.contains(num)) {
            throw IllegalStateException("Set does not have $num")
        }

        set.remove(num)
    }

    fun remainingNumbers(): Set<Int> {
        return allNumbers.subtract(set)
    }
}

class Sudoku(initialBoard: Array<Array<Int>>) {
    val board: Array<Array<Int>>
    val cols: Array<SudokuSet>
    val rows: Array<SudokuSet>
    val boxes: Array<SudokuSet>
    val box: Array<Array<Int>>

    init {

        // todo make a deep copy
        board = initialBoard
        cols = Array<SudokuSet>(9) { SudokuSet() }
        rows = Array<SudokuSet>(9) { SudokuSet() }
        boxes = Array<SudokuSet>(9) { SudokuSet() }

    }

    fun insert(num: Int, xCoor: Int, yCoor: Int ){
        // check valid then insert into space if allows
        // calculate what box they'll also be in
        cols[yCoor].addNumber(num)
        rows[xCoor].addNumber(num)
        boxes[boxNum(xCoor,yCoor)].addNumber(num)

    }

    //todo figure out what box given x and y
    fun boxNum(xCoor: Int, yCoor: Int) :Int{
        //think of it like an actual box
        val x = xCoor/3
        val y = yCoor/3

        return (3*x + y)
    }

}

class App {
    val greeting: String
        get() {
            return "Hello world."
        }
}

fun main(args: Array<String>) {
    println(App().greeting)
}

// 1. Parser: Read an unsolved puzzle, print a solution
// 2. Internal representation: "Puzzle" class
// 3. Solver algorithm
